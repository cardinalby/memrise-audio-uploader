"use strict";class AutoUploadBtn{    constructor() {        this.$btn = undefined;        this.$dropDown = undefined;        /**         * @type {AutoUploadBtn.STATES}         */        this.state = undefined;        /**         * @enum {number}         */        this.STATES = {            READY: 1,            PENDING: 2,            ERROR: 3,            LANGUAGE_SELECT: 4,            UPLOADING: 5,            STOPPING: 6        };        this.BTN_COLORS = {            READY: 'white',            ERROR: 'salmon'        }    }    injectIntoPage() {        // course page        const $body = $('body');        const $courseSaveButton = $body.find("div.pull-right a.btn.btn-success");        if ($courseSaveButton.length) {            this.createBtn(false).insertBefore($courseSaveButton);            return;        }        // database page        const $dbPagination = $body.find("#delete-button");        if ($dbPagination.length) {            this.createBtn(true).insertBefore($dbPagination);        }    };    createElements(isSmall) {        this.$btn =            $('<button>')                .addClass('btn')                .css('background-color', '#7757a8')                .width(150);        this.$dropDown = $('<select>')            .width(150);        if (isSmall) {            this.$btn.addClass('btn-small');            this.$dropDown.addClass('btn-small');            this.$dropDown.height(24);        }        return $('<span>')            .append(this.$btn)            .append(this.$dropDown);    }    createBtn(isSmall) {        const $btnElement = this.createElements(isSmall);        this.$btn.on('click', this.onBtnClick.bind(this));        this.$dropDown            .on('change', this.onDropDownChange.bind(this))            .on('click',() => false);        this.setState(this.STATES.READY);        $('body').on('click', this.onOutsideClick.bind(this));        return $btnElement;    };    /**     * @param {AutoUploadBtn.STATES} state     * @param {object|undefined} [options] Additional info     * @param {int} [options.done] - done count if STATE.UPLOADING     * @param {int} [options.all] - all count if STATE.UPLOADING     * @param {SotLanguage[]} [options.languages] if STATE.LANGUAGE_SELECT     * @param {string} [options.error] if STATE.ERROR     */    setState(state, options)    {        this.state = state;        this.$dropDown.toggle(this.state === this.STATES.LANGUAGE_SELECT);        this.$btn.toggle(this.state !== this.STATES.LANGUAGE_SELECT);        this.$btn.css('color', this.state === this.STATES.ERROR            ? this.BTN_COLORS.ERROR            : this.BTN_COLORS.READY        );        this.$btn.attr('title', this.state === this.STATES.ERROR            ? (options && options.error) || 'Unknown error'            : undefined        );        switch (this.state) {            case this.STATES.READY:                this.$btn.text('Upload audios');                break;            case this.STATES.PENDING:                this.$btn.text('Pending...');                break;            case this.STATES.LANGUAGE_SELECT:                this.$dropDown.find('option').remove();                this.$dropDown.append(new Option('Select voice', undefined, true));                if (options && Array.isArray(options.languages) && options.languages.length !== 0) {                    for (let lang of options.languages) {                        this.$dropDown.append(                            new Option(lang.name, lang.code)                        );                    }                }                break;            case this.STATES.ERROR:                this.$btn.text('Error');                break;            case this.STATES.UPLOADING:                const progressText = options                    ? ': ' + options.done + '/' + options.all                    : '...';                this.$btn.text('Uploading' + progressText);                break;            case this.STATES.STOPPING:                this.$btn.text('Stopping...');                break;        }    };    onOutsideClick() {        if (this.state === this.STATES.LANGUAGE_SELECT) {            this.setState(this.STATES.READY);        }    }    onBtnClick() {        switch (this.state)        {            case this.STATES.READY:                this.setState(this.STATES.PENDING);                this.startAutoupload();                break;            case this.STATES.UPLOADING:                this.setState(this.STATES.STOPPING);                uploadManager.stopUploading();                break;            case this.STATES.ERROR:                this.setState(this.STATES.READY);                break;        }        return false;    };    onDropDownChange(/** Event */ e) {        if (this.state === this.STATES.LANGUAGE_SELECT) {            const languageCode = $(e.target).children("option:selected").val();            this.setState(this.STATES.PENDING);            this.startAutoupload(languageCode);        }        return false;    }    startAutoupload(languageCode)    {        let onAutouploadStarted = all => {            this.setState(this.STATES.UPLOADING, {done: 0, all: all});        };        let onAutouploadProgress = (done, all) => {            if (done !== undefined && done === all) {                this.setState(this.STATES.READY);            }            else if (this.state === this.STATES.UPLOADING) {                this.setState(this.STATES.UPLOADING, {done: done, all: all});            }        };        uploadManager.startAutoUpload(languageCode, onAutouploadStarted, onAutouploadProgress)            .catch(error => {                if (error instanceof UploadManagerLanguageNotSpecifiedError) {                    this.setState(this.STATES.LANGUAGE_SELECT, {languages: error.languages});                }                else {                    // noinspection JSCheckFunctionSignatures                    this.setState(this.STATES.ERROR, {error: error});                }            });    }}(new AutoUploadBtn()).injectIntoPage();
name: buildAndDeploy

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build:
    env:
      EXTENSION_DIR_PATH: 'extension'
      PACKED_ZIP_PATH: 'build/extension.zip'
      OFFLINE_CRX_PATH: 'build/extension.offline.crx'
      WEBSTORE_PUBLISHED_CRX_PATH: 'build/extension.webstore.crx'
      DELAYED_CHROME_WEBSTORE_DEPLOY_TAG: 'deploy-to-chrome-webstore'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - uses: olegtarasov/get-tag@v2
      id: tagName

    - name: Pack directory
      id: packExtensionDir
      uses: cardinalby/webext-buildtools-pack-extension-dir-action@v1
      with:
        extensionDir: ${{ env.EXTENSION_DIR_PATH }}
        zipFilePath: ${{ env.PACKED_ZIP_PATH }}

    - name: Build crx
      id: buildCrx
      uses: cardinalby/webext-buildtools-chrome-crx-action@v2
      with:
        zipFilePath: ${{ env.PACKED_ZIP_PATH }}
        crxFilePath: ${{ env.OFFLINE_CRX_PATH }}
        privateKey: ${{ secrets.CHROME_CRX_PRIVATE_KEY }}

    - name: Fetch Google API access token
      id: gAccessToken
      uses: cardinalby/google-api-fetch-token-action@v1
      with:
        clientId: ${{ secrets.G_CLIENT_ID }}
        clientSecret: ${{ secrets.G_CLIENT_SECRET }}
        refreshToken: ${{ secrets.G_REFRESH_TOKEN }}

    - name: Upload to Google Web Store
      id: gWebStoreUpload
      uses: cardinalby/webext-buildtools-chrome-webstore-upload-action@master
      continue-on-error: true
      with:
        zipFilePath: ${{ env.PACKED_ZIP_PATH }}
        extensionId: ${{ secrets.G_EXTENSION_ID }}
        apiAccessToken: ${{ steps.gAccessToken.outputs.accessToken }}

    - name: Add tag to deploy to Chrome Web Store later
      if: steps.gWebStoreUpload.outputs.inReviewError == 'true'
      uses: cardinalby/git-tag-action@master
      env:
        TAG: ${{ env.DELAYED_CHROME_WEBSTORE_DEPLOY_TAG }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish at Google Web Store
      id: gWebStorePublish
      if: steps.gWebStoreUpload.outputs.newVersion
      uses: cardinalby/webext-buildtools-chrome-webstore-publish-action@master
      with:
        extensionId: ${{ secrets.G_EXTENSION_ID }}
        apiAccessToken: ${{ steps.gAccessToken.outputs.accessToken }}

    - name: Check can continue after uploading
      run: ([ -z '${{ steps.gWebStoreUpload.outputs.newVersion }}' ] && [ '${{ steps.gWebStoreUpload.outputs.inReviewError }}' != 'true' ]) && exit 1 || exit 0

    - name: Download published crx file
      id: gWebStoreDownloadCrx
      if: steps.gWebStorePublish.outcome == 'success'
      uses: cardinalby/webext-buildtools-chrome-webstore-download-crx-action@master
      with:
        extensionId: ${{ secrets.G_EXTENSION_ID }}
        crxFilePath: ${{ env.WEBSTORE_PUBLISHED_CRX_PATH }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tagName.outputs.tag }}
        release_name: Release ${{ steps.tagName.outputs.tag }}
        body: Extension release
        draft: false
        prerelease: false

    - name: Upload offline crx release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.buildCrx.outputs.crxFilePath }}
        asset_name: extension.offline.crx
        asset_content_type: application/x-chrome-extension

    - name: Upload webstore published crx release asset
      if: steps.gWebStoreDownloadCrx.outcome == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.gWebStoreDownloadCrx.outputs.crxFilePath }}
        asset_name: extension.webstore.crx
        asset_content_type: application/x-chrome-extension